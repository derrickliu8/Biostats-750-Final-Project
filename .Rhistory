x=model.matrix(output~.,heart_dat)[,-14]
y=heart_dat$output
y.test=y[test]
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
#lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid, family = binomial)
plot(lasso.mod)
# continuing lasso - code adapted from Lab 5
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
#cv.out=cv.glmnet(x[train,],y[train],alpha=1, family = binomial)
plot(cv.out)
bestlam=cv.out$lambda.min # tuning parameter
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2) # MSE
out = glmnet(x,y,alpha=1,lambda=grid) # producing a model with 10 predictors
lasso.coef=predict(out,type="coefficients",s=bestlam)[1:13,]
lasso.coef[lasso.coef!=0]
bestlam
cv.out$lambda
# ridge - code adapted from Lab 5
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid, thresh=1e-12)
#ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid, thresh=1e-12,
#family = binomial)
ridge.pred=predict(ridge.mod,newx=x[test,])
mean((ridge.pred-y.test)^2)
out2=glmnet(x,y,alpha=0)  # again, glmnet function is producing a model with not all zero values for the parameter estimates
# glmnet function fits a GLM with lasso or elastic net regularization
ridge.coef = predict(out2,type="coefficients",s=bestlam)[1:13,]
ridge.coef[ridge.coef!=0]
# fitting a model with best subset selection
library(MASS) # for the stepAIC function
library(dplyr) # for the pipeline operator
set.seed(1)
best_subset_logregmodel <- glm(output ~., data = heart_dat[train,], family = binomial) %>%
stepAIC(trace = FALSE)
best_subset_logregmodel
summary(best_subset_logregmodel)
# fitting a model with forward stepwise selection
set.seed(1)
forward_logregmodel <- glm(output ~., data = heart_dat[train,], family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
forward_logregmodel
summary(forward_logregmodel)
# fitting a model with backward stepwise selection
set.seed(1)
backward_logregmodel <- glm(output ~., data = heart_dat[train,], family = binomial) %>%
stepAIC(direction = "backward", trace = FALSE)
backward_logregmodel
summary(backward_logregmodel)
final_logregmodel <- glm(output ~sex+cp+trtbps+thalachh+exng+caa+thall,
data = heart_dat, family = binomial)
summary(final_logregmodel)
# Cross Validation done on the model chosen by best subset selection
k = 10
folds = sample(1:k, nrow(heart_dat), replace = TRUE)
set.seed(1)
model_saver <- matrix(ncol = 10)
cv.errors2 = matrix(NA, k, 13)
intercept <- matrix(NA, k, 11)
for(j in 1:k){
#best.fit=regsubsets(output~.,data=heart_dat[folds!=j,], nvmax =13)
best_subset_logregmodel <- glm(output ~., data = heart_dat[folds != j,], family = binomial) %>%
stepAIC(trace = F)
model_saver[j] <- length(best_subset_logregmodel$coefficients)  #saves the number of non-zero coefficients
intercept[j,] <- best_subset_logregmodel$coefficients[1:11]     #looks at model coefficients
for(i in 1:13){
pred=predict(best_subset_logregmodel,heart_dat[folds==j,], type = "response") #what does id do? id does nothing
pred = ifelse(pred > 0.5, 1, 0)
cv.errors2[j, i]=mean((heart_dat$output[folds==j] != pred))
}
}
mean.cv.errors.anna = mean(cv.errors2)
#cv.errors2[,1]
#intercept
model_saver
# Cross Validation done on the model chosen by forward stepwise selection
cv.errors3 = matrix(NA, k, 13)
intercept2 <- matrix(NA, k, 14)
model_saver2 <- matrix(ncol = 14)
for(j in 1:k){
#best.fit=regsubsets(output~.,data=heart_dat[folds!=j,], nvmax =13)
forward_logregmodel <- glm(output ~., data = heart_dat[folds != j,], family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
model_saver2[j] <- length(forward_logregmodel$coefficients)   #saves the number of non zero coefficients
intercept2[j,] <- forward_logregmodel$coefficients[1:14] #looks at model coeffeicent
for(i in 1:13){
pred=predict(forward_logregmodel,heart_dat[folds==j,], type = "response") #what does id do? id does nothing
pred = ifelse(pred > 0.5, 1, 0)
cv.errors3[j,i]=mean(heart_dat$output[folds==j] != pred)
}
}
mean.cv.errors.anna = mean(cv.errors3)
#cv.errors3[,1]
##intercept2
model_saver2
View(heart_dat)
install.packages("ROCR")
library(ROCR)
back.preds <- predict(backward_logregmodel, data = heart_dat[,test], type = "response")
back.rocr <- prediction(back.preds, heart_dat[,test]$output)
back.preds <- predict(backward_logregmodel, data = heart_dat[,test], type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.preds <- predict(backward_logregmodel, data = heart_dat[,test], type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat[,test]$output)
y <- heart_dat[,test]$output
back.preds <- predict(backward_logregmodel, data = heart_dat[,test], type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, y)
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
y <- heart_dat$output[,test]
# fitting a model with backward stepwise selection
set.seed(1)
backward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "backward", trace = FALSE)
backward_logregmodel
summary(backward_logregmodel)
# fitting a model with forward stepwise selection
set.seed(1)
forward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
forward_logregmodel
summary(forward_logregmodel)
# fitting a model with best subset selection
library(MASS) # for the stepAIC function
library(dplyr) # for the pipeline operator
set.seed(1)
best_subset_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(trace = FALSE)
best_subset_logregmodel
summary(best_subset_logregmodel)
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(pred,"tpr","fpr")
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(pred,"tpr","fpr")
back.perf <- performance(back.preds,"tpr","fpr")
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf)
performance(back.rocr,"auc")@y.values
performance(back.rocr,"auc")
performance(back.rocr,"auc")@y.values
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf)
performance(back.rocr,"auc")@y.values
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf)
performance(back.rocr,"auc")
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf, avg="threshold",
spread.estimate="boxplot")
)
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf, avg="threshold",
spread.estimate="boxplot"))
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf, avg="threshold",
spread.estimate="boxplot")
performance(back.rocr,"auc")
forw.preds <- predict(forward_logregmodel, data = heart_dat, type = "response")
forw.preds <- ifelse(forw.preds < 0.5, 0, 1)
forw.rocr <- prediction(forw.preds, heart_dat$output)
forw.perf <- performance(forw.rocr,"tpr","fpr")
plot(forw.perf, avg="threshold",
spread.estimate="boxplot")
performance(forw.rocr,"auc")
forw.preds <- predict(forward_logregmodel, data = heart_dat, type = "response")
forw.preds <- ifelse(forw.preds < 0.5, 0, 1)
forw.rocr <- prediction(forw.preds, heart_dat$output)
forw.perf <- performance(forw.rocr,"tpr","fpr")
plot(forw.perf, avg="threshold",
spread.estimate="boxplot")
performance(forw.rocr,"auc")
forw.preds <- predict(forward_logregmodel, data = heart_dat, type = "response")
forw.preds <- ifelse(forw.preds < 0.5, 0, 1)
forw.rocr <- prediction(forw.preds, heart_dat$output)
forw.perf <- performance(forw.rocr,"tpr","fpr")
plot(forw.perf, avg="threshold",
spread.estimate="boxplot")
performance(forw.rocr,"auc")@y.values
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf, avg="threshold",
spread.estimate="boxplot")
performance(back.rocr,"auc")@y.values
best.preds <- predict(best_subset_logregmodel, data = heart_dat, type = "response")
best.preds <- ifelse(best.preds < 0.5, 0, 1)
best.rocr <- prediction(best.preds, heart_dat$output)
best.perf <- performance(best.rocr,"tpr","fpr")
plot(best.perf, avg="threshold",
spread.estimate="boxplot")
performance(best.rocr,"auc")@y.values
final.preds <- predict(final_logregmodel, data = heart_dat, type = "response")
final.preds <- ifelse(final.preds < 0.5, 0, 1)
final.rocr <- prediction(final.preds, heart_dat$output)
final.perf <- performance(final.rocr,"tpr","fpr")
plot(final.perf, avg="threshold",
spread.estimate="boxplot")
performance(final.rocr,"auc")@y.values
# reading in the data set
heart_dat <- read.csv("heart.csv")
head(heart_dat)
# reading in the data set
heart_dat <- read.csv("heart.csv")
head(heart_dat)
# histogram of the age variable
hist(heart_dat$age, main = "Ages", xlab = "Age (in years)")
# histogram of the resting blood pressure
hist(heart_dat$trtbps, main = "Resting Blood Pressure",
xlab = "Resting Blood Pressure (in mm Hg)")
# log(trtbps+1) transformation to see if that fixes the skewness to the right
# read that log(x+1) transformation works to fix distributions skewed to the
# right at the following link: http://seismo.berkeley.edu/~kirchner/eps_120/Toolkits/Toolkit_03.pdf
# looks a lot more normally distributed
library(base)
heart_dat$trtbps_transformed <- log10((heart_dat$trtbps)+1)
hist(heart_dat$trtbps_transformed, main = "Resting Blood Pressure",
xlab = "Resting Blood Pressure (in mm Hg)")
# histogram of the cholesterol levels
hist(heart_dat$chol, main = "Cholesterol Levels",
xlab = "Cholesterol (mg/dl)")
# log(chol+1) transformation to see if that fixes the skewness to the right
# looks a lot more normally distributed
heart_dat$chol_transformed <- log10((heart_dat$chol)+1)
hist(heart_dat$chol_transformed, main = "Cholesterol Levels",
xlab = "Cholesterol (mg/dl)")
# histogram of the maximum heart rate achieved
# looks like there is a skew to the left
hist(heart_dat$thalachh, main = "Maximum Heart Rate",
xlab = "Maximum Heart Rate Achieved (in bpm)")
# sqrt(constant-thalachh) transformation to see if that fixes the skewness to the left
# looks a lot more normally distributed
# coombatting left skew: https://rcompanion.org/handbook/I_12.html#:~:text=For%20left%2Dskewed%20data%E2%80%94tail,log%20(constant%20%E2%80%93%20x).
heart_dat$thalachh_transformed <- sqrt(250-(heart_dat$thalachh))
hist(heart_dat$thalachh_transformed, main = "Maximum Heart Rate",
xlab = "Maximum Heart Rate Achieved (in bpm)")
# histogram of the oldpeak variable
# looks like there is a strong skew to the right
hist(heart_dat$oldpeak, main = "ST Depression",
xlab = "ST Depression Induced by Exercise Relative to Rest")
# log(oldpeak+1) transformation to see if that fixes the skewness to the right
# the skew to the right seems to be less by a tiny bit, but it is still there
heart_dat$oldpeak_transformed <- log10((heart_dat$oldpeak)+1)
hist(heart_dat$oldpeak_transformed, main = "ST Depression",
xlab = "ST Depression Induced by Exercise Relative to Rest")
library(dplyr)
heart_dat %>% group_by(sex) %>% summarise( total = n())
# modified data set with transformed variables to use for model in LDA/QDA
# so the normality assumption for the data is not violated
heart_dat_modified <- heart_dat[,-c(4,5,8,18)]
head(heart_dat_modified)
round(cor(heart_dat), 2)
# getting summary statistics for each of the numeric type predictor variables to
# be used from the data set
library(stargazer)
stargazer(heart_dat[c("age","trtbps","chol","thalachh","oldpeak")], type="text",summary.stat=c("n","mean","sd", "min", "max"))
# changing all the non-numeric variables to factor type variables
heart_dat$sex <- as.factor(heart_dat$sex)
heart_dat$cp <- as.factor(heart_dat$cp)
heart_dat$fbs <- as.factor(heart_dat$fbs)
heart_dat$restecg <- as.factor(heart_dat$restecg)
heart_dat$exng <- as.factor(heart_dat$exng)
heart_dat$slp <- as.factor(heart_dat$slp)
heart_dat$caa <- as.factor(heart_dat$caa)
heart_dat$thall <- as.factor(heart_dat$thall)
#heart_dat$output <- as.factor(heart_dat$output)
head(heart_dat)
# lasso - code adapted from Lab 5
# binomial still not working here
library(glmnet)
train=sample(1:nrow(heart_dat), nrow(heart_dat)/2)
test = (-train)
grid=10^seq(10,-2,length=100)
x=model.matrix(output~.,heart_dat)[,-14]
y=heart_dat$output
y.test=y[test]
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
#lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid, family = binomial)
plot(lasso.mod)
# continuing lasso - code adapted from Lab 5
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
#cv.out=cv.glmnet(x[train,],y[train],alpha=1, family = binomial)
plot(cv.out)
bestlam=cv.out$lambda.min # tuning parameter
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2) # MSE
out = glmnet(x,y,alpha=1,lambda=grid) # producing a model with 10 predictors
lasso.coef=predict(out,type="coefficients",s=bestlam)[1:13,]
lasso.coef[lasso.coef!=0]
bestlam
cv.out$lambda
# ridge - code adapted from Lab 5
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid, thresh=1e-12)
#ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid, thresh=1e-12,
#family = binomial)
ridge.pred=predict(ridge.mod,newx=x[test,])
mean((ridge.pred-y.test)^2)
out2=glmnet(x,y,alpha=0)  # again, glmnet function is producing a model with not all zero values for the parameter estimates
# glmnet function fits a GLM with lasso or elastic net regularization
ridge.coef = predict(out2,type="coefficients",s=bestlam)[1:13,]
ridge.coef[ridge.coef!=0]
# fitting a model with best subset selection
library(MASS) # for the stepAIC function
library(dplyr) # for the pipeline operator
set.seed(1)
best_subset_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(trace = FALSE)
best_subset_logregmodel
summary(best_subset_logregmodel)
# fitting a model with forward stepwise selection
set.seed(1)
forward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
forward_logregmodel
summary(forward_logregmodel)
# fitting a model with backward stepwise selection
set.seed(1)
backward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "backward", trace = FALSE)
backward_logregmodel
summary(backward_logregmodel)
final_logregmodel <- glm(output ~sex+cp+trtbps+exng+oldpeak+slp+caa+thall,
data = heart_dat, family = binomial)
summary(final_logregmodel)
# Cross Validation done on the model chosen by best subset selection
k = 10
folds = sample(1:k, nrow(heart_dat), replace = TRUE)
set.seed(1)
model_saver <- matrix(ncol = 10)
cv.errors2 = matrix(NA, k, 13)
intercept <- matrix(NA, k, 11)
for(j in 1:k){
best_subset_logregmodel <- glm(output ~., data = heart_dat[folds != j,], family = binomial) %>%
stepAIC(trace = F)
model_saver[j] <- length(best_subset_logregmodel$coefficients)  #saves the number of non-zero coefficients
intercept[j,] <- best_subset_logregmodel$coefficients[1:11]     #looks at model coefficients
for(i in 1:13){
pred=predict(best_subset_logregmodel,heart_dat[folds==j,], type = "response")
pred = ifelse(pred > 0.5, 1, 0)
cv.errors2[j, i]=mean((heart_dat$output[folds==j] != pred))
}
}
mean.cv.errors.anna = mean(cv.errors2)
#cv.errors2[,1]
#intercept
model_saver
# Cross Validation done on the model chosen by forward stepwise selection
cv.errors3 = matrix(NA, k, 13)
intercept2 <- matrix(NA, k, 14)
model_saver2 <- matrix(ncol = 14)
for(j in 1:k){
forward_logregmodel <- glm(output ~., data = heart_dat[folds != j,], family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
model_saver2[j] <- length(forward_logregmodel$coefficients)   #saves the number of non zero coefficients
intercept2[j,] <- forward_logregmodel$coefficients[1:14] #looks at model coeffeicent
for(i in 1:13){
pred=predict(forward_logregmodel,heart_dat[folds==j,], type = "response")
pred = ifelse(pred > 0.5, 1, 0)
cv.errors3[j,i]=mean(heart_dat$output[folds==j] != pred)
}
}
mean.cv.errors.anna = mean(cv.errors3)
#cv.errors3[,1]
##intercept2
model_saver2
library(ROCR)
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf, avg="threshold",
spread.estimate="boxplot")
performance(back.rocr,"auc")@y.values
forw.preds <- predict(forward_logregmodel, data = heart_dat, type = "response")
forw.preds <- ifelse(forw.preds < 0.5, 0, 1)
forw.rocr <- prediction(forw.preds, heart_dat$output)
best.preds <- predict(best_subset_logregmodel, data = heart_dat, type = "response")
best.preds <- ifelse(best.preds < 0.5, 0, 1)
best.rocr <- prediction(best.preds, heart_dat$output)
# fitting a model with best subset selection
library(MASS) # for the stepAIC function
library(dplyr) # for the pipeline operator
set.seed(1)
best_subset_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(trace = FALSE)
best_subset_logregmodel
summary(best_subset_logregmodel)
# fitting a model with forward stepwise selection
set.seed(1)
forward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
forward_logregmodel
summary(forward_logregmodel)
# fitting a model with backward stepwise selection
set.seed(1)
backward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "backward", trace = FALSE)
# fitting a model with backward stepwise selection
set.seed(1)
backward_logregmodel <- glm(output ~., data = heart_dat, family = binomial) %>%
stepAIC(direction = "backward", trace = FALSE)
backward_logregmodel
summary(backward_logregmodel)
final_logregmodel <- glm(output ~sex+cp+trtbps+exng+oldpeak+slp+caa+thall,
data = heart_dat, family = binomial)
summary(final_logregmodel)
back.preds <- predict(backward_logregmodel, data = heart_dat, type = "response")
back.preds <- ifelse(back.preds < 0.5, 0, 1)
back.rocr <- prediction(back.preds, heart_dat$output)
back.perf <- performance(back.rocr,"tpr","fpr")
plot(back.perf, avg="threshold",
spread.estimate="boxplot")
performance(back.rocr,"auc")@y.values
forw.preds <- predict(forward_logregmodel, data = heart_dat, type = "response")
forw.preds <- ifelse(forw.preds < 0.5, 0, 1)
forw.rocr <- prediction(forw.preds, heart_dat$output)
forw.perf <- performance(forw.rocr,"tpr","fpr")
plot(forw.perf, avg="threshold",
spread.estimate="boxplot")
performance(forw.rocr,"auc")@y.values
best.preds <- predict(best_subset_logregmodel, data = heart_dat, type = "response")
best.preds <- ifelse(best.preds < 0.5, 0, 1)
best.rocr <- prediction(best.preds, heart_dat$output)
best.perf <- performance(best.rocr,"tpr","fpr")
plot(best.perf, avg="threshold",
spread.estimate="boxplot")
performance(best.rocr,"auc")@y.values
final.preds <- predict(final_logregmodel, data = heart_dat, type = "response")
final.preds <- ifelse(final.preds < 0.5, 0, 1)
final.rocr <- prediction(final.preds, heart_dat$output)
final.perf <- performance(final.rocr,"tpr","fpr")
plot(final.perf, avg="threshold",
spread.estimate="boxplot")
performance(final.rocr,"auc")@y.values
# changing all the non-numeric variables to factor type variables
heart_dat_modified$sex <- as.factor(heart_dat_modified$sex)
heart_dat_modified$cp <- as.factor(heart_dat_modified$cp)
heart_dat_modified$fbs <- as.factor(heart_dat_modified$fbs)
heart_dat_modified$restecg <- as.factor(heart_dat_modified$restecg)
heart_dat_modified$exng <- as.factor(heart_dat_modified$exng)
heart_dat_modified$slp <- as.factor(heart_dat_modified$slp)
heart_dat_modified$caa <- as.factor(heart_dat_modified$caa)
heart_dat_modified$thall <- as.factor(heart_dat_modified$thall)
#heart_dat$output <- as.factor(heart_dat$output)
head(heart_dat_modified)
# fitting a model with best subset selection
set.seed(1)
best_subset_logregmodel2 <- glm(output ~., data = heart_dat_modified, family = binomial) %>%
stepAIC(trace = FALSE)
best_subset_logregmodel2
summary(best_subset_logregmodel2)
# fitting a model with forward stepwise selection
set.seed(1)
forward_logregmodel2 <- glm(output ~., data = heart_dat_modified, family = binomial) %>%
stepAIC(direction = "forward", trace = FALSE)
forward_logregmodel2
summary(forward_logregmodel2)
# fitting a model with backward stepwise selection
set.seed(1)
backward_logregmodel2 <- glm(output ~., data = heart_dat_modified, family = binomial) %>%
stepAIC(direction = "backward", trace = FALSE)
backward_logregmodel2
summary(backward_logregmodel2)
# LDA for the model chosen by best subset selection/backward stepwise selection
set.seed(1)
dt2 = sort(sample(nrow(heart_dat_modified), nrow(heart_dat_modified)*.9))
train2 <- heart_dat_modified[dt2,]
test2 <- heart_dat_modified[-dt2,]
lda_best <- lda(output~ sex+cp+exng+oldpeak+slp+caa+thall+trtbps_transformed+thalachh_transformed,
data = train2)
lda_best_pred <- predict(lda_best, test2)
table(lda_best_pred$class, test2$output)
# QDA for the model chosen by best subset selection/backward stepwise selection
set.seed(1)
qda_best <- qda(output~ sex+cp+exng+oldpeak+slp+caa+thall+trtbps_transformed+thalachh_transformed,
data = train2)
qda_best_pred <- predict(qda_best, test2)
table(qda_best_pred$class, test2$output)
View(heart_dat)
View(intercept)
View(heart_dat_modified)
# histogram of the cholesterol levels
hist(heart_dat$chol, main = "Cholesterol Levels",
xlab = "Cholesterol (mg/dl)")
